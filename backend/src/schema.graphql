type Query {
  me: User!
  users(query: String, first: Int, skip: Int, after: String): [User!]!
  lockboxes(query: String, first: Int, skip: Int, after: String): [Lockbox!]!
  transactions(
    query: String
    first: Int
    skip: Int
    after: String
  ): [LockboxTransaction!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser(id: ID!): User!
  updateUser(data: UpdateUserInput!): User!
  login(data: LoginUserInput!): AuthPayload!
  createLockbox(data: CreateLockboxInput): Lockbox!
  updateLockbox(data: UpdateLockboxInput): Lockbox!
  deleteLockbox(id: ID!): Lockbox!
  createLockboxTransaction(
    transaction: TransactionType!
    data: TransactionInput!
  ): Lockbox!
}

input LoginUserInput {
  email: String!
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input CreateLockboxInput {
  amount: Float!
  branch: String!
  box: String!
  time: String!
  date: String!
}

input UpdateLockboxInput {
  amount: Float
  branch: String
  box: String
  time: String
  date: String
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  updatedAt: String!
  createdAt: String!
}

type Lockbox {
  id: ID!
  branch: String!
  amount: Float!
  box: String!
  time: String!
  date: String!
  transactions: [LockboxTransaction!]!
  updatedAt: String!
  createdAt: String!
}

type LockboxTransaction {
  id: ID!
  amount: Float!
  lockbox: Lockbox!
  updatedAt: String!
  createdAt: String!
}

input TransactionInput {
  lockbox: ID!
  amount: Float!
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
}
